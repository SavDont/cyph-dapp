{"version":3,"sources":["config.ts","App/client.tsx","App/encrypt.tsx","App/style.tsx","App/routes/Home/index.tsx","App/paths.ts","App/routes/Login/index.tsx","App/routes/Add/FormAdd.tsx","App/routes/Add/index.tsx","App/routes/Key/FormKey.tsx","App/routes/Key/index.tsx","App/routes/Edit/FormEdit.tsx","App/routes/Edit/index.tsx","App/routes/Delete/index.tsx","App/ProtectedSwitch.tsx","App/index.tsx","index.tsx"],"names":["configs","local","chainId","chainName","addressPrefix","rpcUrl","httpUrl","faucetUrl","feeToken","stakingToken","coinMap","ucosm","denom","fractionalDigits","uatom","gasPrice","sandynet","ubay","umaya","config","getAppConfig","throwNotInitialized","Error","defaultContext","initialized","address","init","getSigner","getClient","CosmWasmContext","React","useCosmWasm","CosmWasmProvider","configProp","children","useState","signer","setSigner","client","setClient","setAddress","contextWithInit","value","setValue","useEffect","a","SigningCosmWasmClient","connectWithSigner","getAccounts","account","Provider","key","setKey","encrypt","msg","decrypt","EncryptContext","useEncrypt","EncryptProvider","toString","enc","Utf8","Text","MainStack","styled","Stack","WelcomeStack","PasswordStack","LightText","ErrorText","Title","Home","useError","error","setError","response","setResponse","loading","setLoading","queryPasswords","get_all","owner","queryContractSmart","then","result","catch","console","message","loadingText","level","entries","map","name","password","to","EditOutlined","DeleteOutlined","PlusOutlined","Login","history","useHistory","clearError","initializing","setInitializing","cosmWasm","anyWindow","window","keplr","experimentalSuggestChain","configKeplr","enable","getOfflineSigner","offlineSigner","push","type","shape","onClick","href","target","rel","FormAdd","setNewName","setNewPassword","addButtonAction","initialValues","onSubmit","formikProps","placeholder","onChange","event","Password","LeftOutlined","goBack","disabled","isValid","dirty","Add","newName","newPassword","addPassword","add","execute","amount","gas","FormKey","submitButtonAction","Key","FormEdit","editButtonAction","Edit","useParams","edit","Delete","delete","tryDelete","ProtectedSwitch","authPath","location","pathname","state","redirectPathname","redirectState","undefined","App","basename","process","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9222f99f.chunk.js","sourcesContent":["import { AppConfig, getAppConfig, NetworkConfigs } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  chainId: \"testing\",\n  chainName: \"Testing\",\n  addressPrefix: \"cosmos\",\n  rpcUrl: \"http://localhost:26657\",\n  httpUrl: \"http://localhost:1317\",\n  faucetUrl: \"http://localhost:8000\",\n  feeToken: \"ucosm\",\n  stakingToken: \"uatom\",\n  coinMap: {\n    ucosm: { denom: \"COSM\", fractionalDigits: 6 },\n    uatom: { denom: \"ATOM\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n};\n\nconst sandynet: AppConfig = {\n  chainId: \"sandynet-1\",\n  chainName: \"sandynet-1\",\n  addressPrefix: \"wasm\",\n  rpcUrl: \"https://rpc.sandynet.cosmwasm.com:443\",\n  httpUrl: \"https://lcd.sandynet.cosmwasm.com\",\n  faucetUrl: \"https://faucet.sandynet.cosmwasm.com\",\n  feeToken: \"ubay\",\n  stakingToken: \"umaya\",\n  coinMap: {\n    ubay: { denom: \"BAY\", fractionalDigits: 6 },\n    umaya: { denom: \"MAYA\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n};\n\nconst configs: NetworkConfigs = { local, sandynet };\nexport const config = getAppConfig(configs);\n","import { AppConfig } from \"@cosmicdapp/logic\";\nimport { OfflineSigner } from \"@cosmjs/proto-signing\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\n\ninterface CosmWasmContextType {\n    readonly initialized: boolean;\n    readonly address: string;\n    readonly config: Partial<AppConfig>;\n    readonly init: (signer: OfflineSigner) => void;\n    readonly getSigner: () => OfflineSigner;\n    readonly getClient: () => SigningCosmWasmClient;\n}\n\nfunction throwNotInitialized(): any {\n    throw new Error(\"Not yet initialized\");\n}\n\nconst defaultContext: CosmWasmContextType = {\n    initialized: false,\n    address: \"\",\n    config: {},\n    init: throwNotInitialized,\n    getSigner: throwNotInitialized,\n    getClient: throwNotInitialized,\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\nexport const useCosmWasm = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface CosmWasmProviderProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n    readonly config: AppConfig;\n}\n\nexport function CosmWasmProvider({ config: configProp, children }: CosmWasmProviderProps): JSX.Element {\n    const [config, _setConfig] = useState(configProp);\n    const [signer, setSigner] = useState<OfflineSigner>();\n    const [client, setClient] = useState<SigningCosmWasmClient>();\n    const [address, setAddress] = useState(\"\");\n\n    const contextWithInit = { ...defaultContext, init: setSigner };\n    const [value, setValue] = useState<CosmWasmContextType>(contextWithInit);\n\n    useEffect(() => {\n        if (!signer) return;\n        (async function updateClient() {\n            const client = await SigningCosmWasmClient.connectWithSigner(config.rpcUrl, signer);\n            setClient(client);\n        })();\n    }, [signer, config]);\n\n    useEffect(() => {\n        if (!signer) return;\n        (async function updateAddress() {\n            const [account] = await signer.getAccounts();\n            setAddress(account.address);\n        })();\n    }, [signer]);\n\n    useEffect(() => {\n        if (!signer || !client || !address) return;\n    \n        (async function updateValue() {\n          setValue({\n              initialized: true,\n              address,\n              config,\n              init: () => {},\n              getSigner: () => signer,\n              getClient: () => client,\n          });\n        })();\n    }, [signer, client, address, config]);\n    \n    return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}","import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { encrypt, decrypt } from \"crypto-js/aes\";\nimport { enc } from \"crypto-js\";\n\ninterface EncryptContextType {\n    readonly key: string;\n    readonly setKey: (key: string) => void;\n    readonly encrypt: (msg: string) => string;\n    readonly decrypt: (msg: string) => string;\n}\n\nconst defaultContext: EncryptContextType = {\n    key: \"\",\n    setKey: (key: string) => { return; },\n    encrypt: (msg: string) => { return \"\"; },\n    decrypt: (msg: string) => { return \"\"; },\n}\n\nconst EncryptContext = React.createContext<EncryptContextType>(defaultContext);\nexport const useEncrypt = (): EncryptContextType => React.useContext(EncryptContext);\n\nexport function EncryptProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n    const [key, setKey] = useState(\"\");\n\n    const contextWithInit = { ...defaultContext, setKey: setKey };\n    const [value, setValue] = useState<EncryptContextType>(contextWithInit);\n\n    useEffect(() => {\n        if (!key) return;\n        \n        function encryptMsg(msg: string) {\n            return encrypt(msg, key).toString()\n        }\n\n        function decryptMsg(msg: string) {\n            return decrypt(msg, key).toString(enc.Utf8)\n        }\n\n        const context: EncryptContextType = {\n            key: key,\n            setKey: setKey,\n            encrypt: encryptMsg,\n            decrypt: decryptMsg,\n        };\n\n        setValue(context);\n    }, [key]);\n\n    return <EncryptContext.Provider value={value}>{children}</EncryptContext.Provider>\n}","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"@cosmicdapp/design\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const PasswordStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n\nexport const ErrorText = styled(Text)`\n  color: var(--color-red);\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typography } from \"antd\";\n\nimport { useError } from \"@cosmicdapp/logic\";\nimport { PageLayout, Loading } from \"@cosmicdapp/design\";\nimport { EditOutlined, DeleteOutlined, PlusOutlined } from '@ant-design/icons';\n\nimport { GetAllResponse, QueryMsg } from \"../../../contracts/types/cw-cyph\";\nimport { useCosmWasm } from \"../../client\";\nimport { useEncrypt } from \"../../encrypt\";\nimport { ErrorText, LightText, MainStack, PasswordStack } from \"../../style\";\nimport { pathAdd, pathEdit, pathDelete } from \"../../paths\";\n\nconst { Title } = Typography;\n\nexport function Home(): JSX.Element {\n  const { error, setError } =  useError();\n  const { address, getClient } = useCosmWasm();\n  const { decrypt } = useEncrypt();\n  const contractAddress = \"wasm10ruqujapa6cg5lj5hufrqnpacwt78j445sltcw\";\n  const [response, setResponse] = useState<GetAllResponse>();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const client = getClient();\n    const queryPasswords: QueryMsg = { get_all: { owner: address } };\n    setLoading(true);\n    client\n      .queryContractSmart(contractAddress, queryPasswords)\n      .then( (result) => {\n        setResponse(result);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(error);\n        setError(Error(error).message);\n        setLoading(false);\n      });\n  }, [getClient, setError, address]);\n\n  return  loading ? (\n    <Loading loadingText=\"Loading passwords...\" />\n    ) : (\n    <PageLayout>\n      <MainStack>\n        <PasswordStack>\n        <Title level={2}>CYPH</Title>\n        <LightText>Your Passwords:</LightText>\n          {response && response.entries.map(({ name, password }) => (\n            <Typography>\n              <LightText>Name: {name}</LightText>\n              <LightText>Password: { decrypt(password) }</LightText>\n              <Link to={ `${pathEdit}/${name}`}>\n                <EditOutlined /> \n              </Link>\n              <Link to={ `${pathDelete}/${name}`}>\n                <DeleteOutlined />\n              </Link>\n            </Typography>\n          ))}\n          {error && <ErrorText>{error}</ErrorText>}\n          <Link to={pathAdd}>\n            <PlusOutlined />\n          </Link>\n        </PasswordStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","export const pathLogin = \"/login\";\nexport const pathHome = \"/home\";\nexport const pathAdd = \"/add\";\nexport const pathKey = \"/key\";\nexport const pathEdit = \"/edit\";\nexport const pathDelete = \"/delete\";","import React from \"react\";\nimport { config } from \"../../../config\";\nimport { pathKey } from \"../../paths\";\nimport { Window as KeplrWindow } from \"@keplr-wallet/types\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Loading, PageLayout } from \"@cosmicdapp/design\";\nimport { ErrorText, LightText, MainStack, WelcomeStack } from \"../../style\";\nimport { Button, Typography } from \"antd\";\nimport { configKeplr, useError } from \"@cosmicdapp/logic\";\nimport { useCosmWasm } from \"../../client\";\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface Window extends KeplrWindow {}\n}\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\nconst { Title } = Typography;\n\nexport function Login(): JSX.Element {\n  const history = useHistory();\n  const { error, setError, clearError } = useError();\n  const [initializing, setInitializing] = useState(false);\n  const cosmWasm = useCosmWasm();\n  \n  async function initKeplr() {\n    const anyWindow: any = window;\n    try {\n      await anyWindow.keplr.experimentalSuggestChain(configKeplr(config));\n      await anyWindow.keplr.enable(config.chainId);\n\n      setInitializing(true);\n      clearError();\n      \n      const offlineSigner = await anyWindow.getOfflineSigner(config.chainId);\n      cosmWasm.init(offlineSigner);\n    } catch (error) {\n      console.error(error);\n      if (typeof error === \"string\") {\n        setError(Error(error).message);  \n      } else if (error instanceof Error) {\n        setError(error.message);\n      }\n      setInitializing(false);\n    }\n  }\n\n  useEffect(() => {\n    if (cosmWasm.initialized) {\n      history.push(pathKey);\n    }\n  }, [cosmWasm.initialized]);\n\n  return initializing ? (\n    <Loading loadingText=\"Loading Cyph...\" />\n  ) : (\n    <PageLayout>\n      <MainStack>\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>CYPH</Title>\n            <LightText>A Decentralized End to End Encrypted Password Manager</LightText> \n            <LightText>Please connect your Keplr wallet to continue.</LightText>\n          </Typography>\n          {error && <ErrorText>{error}</ErrorText>}\n          <Button type=\"primary\" shape=\"round\" onClick={initKeplr}>\n            Connect Wallet\n          </Button>\n        </WelcomeStack>\n        <LightText>Built with&nbsp;\n          <a href=\"https://github.com/CosmWasm/cosmwasm\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\">CosmWasm</a>\n          &nbsp;and&nbsp;\n          <a href=\"https://github.com/cosmos/cosmjs\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\">CosmJS</a>\n          &nbsp;by&nbsp; \n          <a href=\"https://github.com/SavDont/cyph-dapp\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\">@savdont</a>.\n          </LightText>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { LeftOutlined } from '@ant-design/icons';\nimport { useHistory } from \"react-router-dom\";\n\ninterface FormAddProps {\n    readonly setNewName: (value: React.SetStateAction<string>) => void;\n    readonly setNewPassword: (value: React.SetStateAction<string>) => void;\n    readonly addButtonAction: () => void;\n}\n\nexport function FormAdd({\n    setNewName,\n    setNewPassword,\n    addButtonAction,\n}: FormAddProps): JSX.Element {\n    const history = useHistory();\n    return (\n        <Formik\n            initialValues={{ name: \"\", password: \"\" }}\n            onSubmit= {addButtonAction}\n        >\n            {(formikProps) => (\n                <Form>\n                    <FormItem name=\"name\">\n                        <Input\n                            name=\"name\"\n                            placeholder=\"Enter name\"\n                            onChange={(event) => {\n                                setNewName(event.target.value);\n                            }}\n                        />\n                    </FormItem>\n                    <FormItem name=\"password\">\n                        <Input.Password\n                            name=\"password\"\n                            placeholder=\"Enter password\"\n                            onChange={(event) => {\n                                setNewPassword(event.target.value);\n                            }}\n                        />\n                    </FormItem>\n                    <LeftOutlined onClick= {() => history.goBack()} />\n                    <Button\n                        type=\"primary\"\n                        shape=\"round\"\n                        onClick={addButtonAction}\n                        disabled={!(formikProps.isValid && formikProps.dirty)}>\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n}","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Typography } from \"antd\";\n\nimport { useError } from \"@cosmicdapp/logic\";\nimport { PageLayout, Loading } from \"@cosmicdapp/design\";\nimport { StdFee } from \"@cosmjs/stargate\";\n\nimport { ExecuteMsg } from \"../../../contracts/types/cw-cyph\";\nimport { useCosmWasm } from \"../../client\";\nimport { useEncrypt } from \"../../encrypt\";\nimport { ErrorText, LightText, MainStack, PasswordStack } from \"../../style\";\nimport { FormAdd } from \"./FormAdd\";\nimport { pathHome } from \"../../paths\";\n\nconst { Title } = Typography;\n\nexport function Add(): JSX.Element {\n    const { error, setError } =  useError();\n    const history = useHistory();\n    const { address, getClient } = useCosmWasm();\n    const contractAddress = \"wasm10ruqujapa6cg5lj5hufrqnpacwt78j445sltcw\";\n    const [loading, setLoading] = useState(false);\n    const { encrypt } = useEncrypt();\n\n    const [newName, setNewName] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n\n    function tryAdd() {\n        setLoading(true);\n        const client = getClient();\n        const addPassword: ExecuteMsg = { add: { name: newName, password: encrypt(newPassword) } };\n        const defaultFee: StdFee = {\n            amount: [],\n            gas: \"200000\",\n        };\n\n        client\n            .execute(address, contractAddress, addPassword, defaultFee)\n            .then(() => {\n                history.push(pathHome);\n                setLoading(false);\n            })\n            .catch((error) => {\n                console.error(error);\n                setError(Error(error).message);\n                setLoading(false);\n            });\n    }\n\n    return loading ? (\n        <Loading loadingText=\"Adding password...\" />\n    ) : (\n        <PageLayout>\n            <MainStack>\n                <PasswordStack>\n                    <Title level={2}>CYPH</Title>\n                    <LightText>Add new password.</LightText>\n                    <FormAdd\n                        setNewName={setNewName}\n                        setNewPassword={setNewPassword}\n                        addButtonAction={tryAdd}\n                    />\n                    {error && <ErrorText>{error}</ErrorText>}\n                </PasswordStack>\n            </MainStack>\n        </PageLayout>\n    );\n}\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\n\ninterface FormKeyProps {\n    readonly setKey: (key: string) => void;\n    readonly submitButtonAction: () => void;\n}\n\nexport function FormKey({\n    setKey,\n    submitButtonAction\n}: FormKeyProps): JSX.Element {\n    return (\n        <Formik\n            initialValues={{ key: \"\" }}\n            onSubmit= { submitButtonAction }\n        >\n            {(formikProps) => (\n                <Form>\n                    <FormItem name=\"key\">\n                        <Input\n                            name=\"key\"\n                            placeholder=\"Enter master key\"\n                            onChange={(event) => {\n                                setKey(event.target.value);\n                            }}\n                        />\n                    </FormItem>\n                    <Button\n                        type=\"primary\"\n                        shape=\"round\"\n                        onClick={ submitButtonAction }\n                        disabled={!(formikProps.isValid && formikProps.dirty)}>\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n}","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Typography } from \"antd\";\n\nimport { PageLayout } from \"@cosmicdapp/design\";\n\nimport { useEncrypt } from \"../../encrypt\";\nimport { MainStack, PasswordStack, LightText } from \"../../style\";\nimport { FormKey } from \"./FormKey\";\nimport { pathHome } from \"../../paths\";\n\nconst { Title } = Typography;\n\nexport function Key(): JSX.Element {\n    const encrypt = useEncrypt();\n\n    const history = useHistory();\n\n    return (\n        <PageLayout>\n            <MainStack>\n                <PasswordStack>\n                    <Title level={2}>CYPH</Title>\n                    <LightText>Please enter your master key below.</LightText> \n                    <LightText>This will be used to encrypt and decrypt your passwords commited to the blockchain.</LightText>\n                    <FormKey\n                        setKey = { encrypt.setKey }\n                        submitButtonAction = { () => history.push(pathHome) }\n                    />\n                </PasswordStack>\n            </MainStack>\n        </PageLayout>\n    );\n}\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { LeftOutlined } from '@ant-design/icons';\nimport { useHistory } from \"react-router-dom\";\n\ninterface FormEditProps {\n    readonly setNewPassword: (value: React.SetStateAction<string>) => void;\n    readonly editButtonAction: () => void;\n}\n\nexport function FormEdit({\n    setNewPassword,\n    editButtonAction,\n}: FormEditProps): JSX.Element {\n    const history = useHistory();\n    return (\n        <Formik\n            initialValues={{ password: \"\" }}\n            onSubmit= {editButtonAction}\n        >\n            {(formikProps) => (\n                <Form>\n                    <FormItem name=\"password\">\n                        <Input.Password\n                            name=\"password\"\n                            placeholder=\"Enter password\"\n                            onChange={(event) => {\n                                setNewPassword(event.target.value);\n                            }}\n                        />\n                    </FormItem>\n                    <LeftOutlined onClick= {() => history.goBack()} />\n                    <Button\n                        type=\"primary\"\n                        shape=\"round\"\n                        onClick={editButtonAction}\n                        disabled={!(formikProps.isValid && formikProps.dirty)}>\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n}","import React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Typography } from \"antd\";\n\nimport { useError } from \"@cosmicdapp/logic\";\nimport { PageLayout, Loading } from \"@cosmicdapp/design\";\nimport { StdFee } from \"@cosmjs/stargate\";\n\nimport { ExecuteMsg } from \"../../../contracts/types/cw-cyph\";\nimport { useCosmWasm } from \"../../client\";\nimport { ErrorText, LightText, MainStack, PasswordStack } from \"../../style\";\nimport { FormEdit } from \"./FormEdit\";\nimport { pathHome } from \"../../paths\";\nimport { useEncrypt } from \"../../encrypt\";\n\nconst { Title } = Typography;\n\ninterface EditParams {\n    readonly name: string;\n  }\n\nexport function Edit(): JSX.Element {\n    const { name } = useParams() as EditParams;\n    const { error, setError } =  useError();\n    const history = useHistory();\n    const { address, getClient } = useCosmWasm();\n    const contractAddress = \"wasm10ruqujapa6cg5lj5hufrqnpacwt78j445sltcw\";\n    const [loading, setLoading] = useState(false);\n    const { encrypt } = useEncrypt();\n\n    const [newPassword, setNewPassword] = useState(\"\");\n\n    function tryEdit() {\n        setLoading(true);\n        const client = getClient();\n        const addPassword: ExecuteMsg = { edit: { name: name, password: encrypt(newPassword) } };\n        const defaultFee: StdFee = {\n            amount: [],\n            gas: \"200000\",\n        };\n\n        client\n            .execute(address, contractAddress, addPassword, defaultFee)\n            .then(() => {\n                history.push(pathHome);\n                setLoading(false);\n            })\n            .catch((error) => {\n                console.error(error);\n                setError(Error(error).message);\n                setLoading(false);\n            });\n    }\n\n    return loading ? (\n        <Loading loadingText=\"Updating password...\" />\n    ) : (\n        <PageLayout>\n            <MainStack>\n                <PasswordStack>\n                    <Title level={2}>CYPH</Title>\n                    <LightText>Set new password for { name }:</LightText>\n                    <FormEdit\n                        setNewPassword={setNewPassword}\n                        editButtonAction={tryEdit}\n                    />\n                    {error && <ErrorText>{error}</ErrorText>}\n                </PasswordStack>\n            </MainStack>\n        </PageLayout>\n    );\n}","import React from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport { useError } from \"@cosmicdapp/logic\";\nimport { Loading } from \"@cosmicdapp/design\";\nimport { StdFee } from \"@cosmjs/stargate\";\n\nimport { ExecuteMsg } from \"../../../contracts/types/cw-cyph\";\nimport { useCosmWasm } from \"../../client\";\nimport { pathHome } from \"../../paths\";\n\ninterface DeleteParams {\n    readonly name: string;\n  }\n\nexport function Delete(): JSX.Element {\n    const { name } = useParams() as DeleteParams;\n    const loadingText = \"Deleting password \" + name + \"...\";\n    const { setError } =  useError();\n    const history = useHistory();\n    const { address, getClient } = useCosmWasm();\n    const contractAddress = \"wasm10ruqujapa6cg5lj5hufrqnpacwt78j445sltcw\";\n\n    function tryDelete(name: string) {\n        const client = getClient();\n        const addPassword: ExecuteMsg = { delete: { name: name } };\n        const defaultFee: StdFee = {\n            amount: [],\n            gas: \"200000\",\n        };\n    \n        client\n            .execute(address, contractAddress, addPassword, defaultFee)\n            .then(() => {\n                history.push(pathHome);\n            })\n            .catch((error) => {\n                console.error(error);\n                setError(Error(error).message);\n                history.push(pathHome);\n            });\n      }\n      tryDelete(name);\n\n    return (\n        <Loading loadingText={ loadingText } />);\n}","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useCosmWasm } from \"./client\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useCosmWasm();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport { ErrorProvider, } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport { pathHome, pathLogin, pathAdd, pathKey, pathEdit, pathDelete } from \"./paths\";\nimport { Home } from \"./routes/Home\";\nimport { Login } from \"./routes/Login\";\nimport { Add } from \"./routes/Add\";\nimport { Key } from \"./routes/Key\";\nimport { Edit } from \"./routes/Edit\";\nimport { Delete } from \"./routes/Delete\";\nimport { CosmWasmProvider } from \"./client\";\nimport { EncryptProvider } from \"./encrypt\";\nimport { ProtectedSwitch } from \"./ProtectedSwitch\";\n\nexport function App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <CosmWasmProvider config={config}>\n        <EncryptProvider>\n          <GlobalStyle />\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path={pathLogin} component={Login} />\n              <Route exact path={pathKey} component={Key} />\n              <ProtectedSwitch authPath={pathLogin}>\n                <Route exact path={pathHome} component={Home} />\n                <Route exact path={pathAdd} component={Add} />\n                <Route exact path={`${pathEdit}/:name`} component={Edit} />\n                <Route exact path={`${pathDelete}/:name`} component={Delete} />\n              </ProtectedSwitch>\n            </Switch>\n          </Router>\n        </EncryptProvider>\n      </CosmWasmProvider>\n    </ErrorProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}